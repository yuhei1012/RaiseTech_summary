AWSTemplateFormatVersion: '2010-09-09'
Description: RDS Template

Parameters:
  DBInstanceIdentifier:
    Description: Identifier for the RDS instance
    Type: String
    Default: testdbinstance

Resources:
  # Secrets Managerでシークレットを作成するリソース
  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Name: testdbpasswaord
      Description: "RDS master password"
      GenerateSecretString: 
        SecretStringTemplate: '{"username":"admin"}'  # ユーザー名を含めることができます
        GenerateStringKey: "password"  # パスワード部分を自動生成
        PasswordLength: 16  # パスワードの長さを指定
        ExcludeCharacters: '"@/\'  # 除外したい文字（例: 特殊文字を制限したい場合）

  # RDSインスタンスのリソース
  testDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      Engine: mysql
      EngineVersion: 8.0.34
      MasterUsername: admin
      # Secrets Managerからパスワードを取得
      MasterUserPassword: '{{resolve:secretsmanager:db/password:SecretString:password}}'  # MySecretで生成されたシークレットを使用
      DBInstanceClass: db.t4g.micro
      VPCSecurityGroups:
        - Ref: testMyDBSecurityGroup
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Port: 3306
      MultiAZ: false
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  # セキュリティグループのリソース
  testMyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My DB Security Group
      VpcId: !ImportValue SampleVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  # すべてのIPからのアクセスを許可（実運用では制限が推奨されます）

  # DB Subnetグループのリソース
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: My DB Subnet Group
      SubnetIds:
        - !ImportValue PrivateSubnet1a  # 既存のプライベートサブネットを参照
        - !ImportValue PrivateSubnet1c

