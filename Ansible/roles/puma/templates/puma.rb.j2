# systemdで実行する際はディレクトリ指定が必要なのでコメントインする
directory "/var/sample-app/raisetech-live8-sample-app"

# Puma can serve each request in a thread from an internal thread pool.
# The `threads` method setting takes two numbers: a minimum and maximum.
# Default is set to 5 threads for minimum and maximum.
max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

# Specifies the `worker_timeout` threshold that Puma will use to wait before
# terminating a worker in development environments.
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

# Specifies the `environment` that Puma will run in.
environment ENV.fetch("RAILS_ENV") { "development" }

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }

# Specifies the `sockfile` that Puma will use.
bind "unix:///var/sample-app/raisetech-live8-sample-app/tmp/sockets/puma.sock"

# Uncomment to enable workers for multi-process mode
# workers ENV.fetch("WEB_CONCURRENCY") { 2 }

# Use the `preload_app!` method when specifying a `workers` number.
# preload_app!

# Allow puma to be restarted by `rails restart` command.
plugin :tmp_restart




